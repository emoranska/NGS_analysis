# remove records with 'chrUn' and 'chrNW' labels
grep -v -P "chr(\d|[Un])+_[NW]*" P1_filtered_Q20_M20_no_ind.recode.vcf > P1_test_filter.vcf

# remove records with 'chrMT' labels
grep -v -P "chrMT\t.*" P1_test_filter.vcf > P1_no_Un_NW_MT.vcf

# save .vcf file to .csv on pendrive because of memory limit
unvcf P1_no_Un_NW_MT.vcf ../../../../media/tomasz/E4F9-A5D9/

# open .csv file, create new csv file with samples description and gt calls and remove records with the same gt calls
less_memory_usage.py

# remove records where >=6 samples are missing values ('.')
finding_homozyg.py

# regex for searching regions of homozygosity:
- beginning for the records from row number to FILTER label in pd dataframe as a string
r"^\d\s{3}(chr\d)?\s{2}\d+\s+\D+\d+\.\d+\s+\w+"

- solution from JvdV for >=3 1/1 OR >=3 0/0
(?=.*(([10])/\3)(?:.*\2){2})(?:\s+[10]/[10]){12}$

- solution from Thefourthbird for >=3 1/1 OR >=3 0/0
(?:(?:\s{2,}\d/\d)*?\s{2,}([10])/\2\b){3}

- regex for filtering pd dataframe as a string with re.findall for >=3 1/1 AND >=3 0/0
"^\d\s{3}chr\d {2}\d+ +\D+\d+\.\d+ +\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*$"gm


- regex for filtering csv file with grep for >=3 1/1 OR >=3 0/0
"chr\d,\d+,\.,\w,\w,\d+\.\d+,\.(?:(?:,?\d/\d)*?,?([10])/\1\b){3}.*$"

- regex for filtering csv file with grep for >=3 1/1 AND >=3 0/0
"chr\d,\d+,\.,\w,\w,\d+\.\d+,\.(?=(?:(?:\,?[01]/[01])*?\,?1/1){3})(?:(?:\,?[01]/[01])*?\,?0/0){3}(?:\,?[01]/[01])*$"gm

-regex for filtering pd dataframe as a string with re.findall for >=3 1/1 AND >=3 0/0 with =<2 breaks
"(?=(^\d\s{3}(chr\d) {2}\d+ +\D+\d+\.\d+ +\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*\n(^\d\s{3}((chr\d) {2}\d+ +\D+\d+\.\d+ +\w+(?:\s+[01]/[01])*\n)){1,2}^\d\s{3}(chr\d) {2}\d+ +\D+\d+\.\d+ +\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*\n))|(^\d\s{3}(chr\d) {2}\d+ +\D+\d+\.\d+ +\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*$)"gm
"(?=(^\d\s{3}(chr\d)\s{2}\d+ +\D+\d+\.\d+\s+\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*\n(^\d\s{3}((chr\d)\s{2}\d+\s+\D+\d+\.\d+\s+\w+(?:\s+[01]/[01])*\n)){1,2}^\d\s{3}(chr\d)\s{2}\d+\s+\D+\d+\.\d+\s+\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*\n))|(^\d\s{3}(chr\d)\s{2}\d+\s+\D+\d+\.\d+\s+\w+(?=(?:(?:\s+[01]/[01])*?\s+1/1){3})(?:(?:(?:\s+[01]/[01])*?\s+0/0){3})(?:\s+[01]/[01])*$)"gm